'use client'

import React, { createContext, useContext, useEffect, useState } from 'react'
import { createSupabaseClient } from '@/lib/supabase'
import type { User as SupabaseUser } from '@supabase/supabase-js'

interface User {
  id: string
  email: string
  name: string
  role: 'user' | 'admin' | 'agent'
}

interface AuthContextType {
  user: User | null
  isLoading: boolean
  login: (email: string, password: string) => Promise<void>
  register: (email: string, password: string, name: string) => Promise<void>
  logout: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isInitialized, setIsInitialized] = useState(false)
  const supabase = createSupabaseClient()

  // Persist user to localStorage
  const persistUser = (userData: User | null) => {
    if (typeof window !== 'undefined') {
      if (userData) {
        localStorage.setItem('skyo_user', JSON.stringify(userData))
        localStorage.setItem('skyo_user_time', Date.now().toString())
      } else {
        localStorage.removeItem('skyo_user')
        localStorage.removeItem('skyo_user_time')
      }
    }
  }

  // Load user from localStorage
  const loadCachedUser = (): User | null => {
    if (typeof window === 'undefined') return null

    try {
      const cachedUser = localStorage.getItem('skyo_user')
      const cacheTime = localStorage.getItem('skyo_user_time')

      if (cachedUser && cacheTime) {
        const timeSinceCache = Date.now() - parseInt(cacheTime)
        // Cache valid for 24 hours
        if (timeSinceCache < 24 * 60 * 60 * 1000) {
          return JSON.parse(cachedUser)
        }
      }
    } catch (error) {
      console.error('Error loading cached user:', error)
    }

    return null
  }

  const setUserWithPersist = (userData: User | null) => {
    setUser(userData)
    persistUser(userData)
  }

  const getUserProfile = async (supabaseUser: SupabaseUser): Promise<User> => {
    // Check if we already have this user cached
    const cachedUser = loadCachedUser()
    if (cachedUser && cachedUser.id === supabaseUser.id && cachedUser.email === supabaseUser.email) {
      return cachedUser
    }

    // Try to get profile from database
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', supabaseUser.id)
      .single()

    return {
      id: supabaseUser.id,
      email: supabaseUser.email!,
      name: supabaseUser.user_metadata?.full_name || supabaseUser.email!.split('@')[0],
      role: profile?.role || 'user'
    }
  }

  useEffect(() => {
    const initAuth = async () => {
      // Load from cache first for instant UI
      const cachedUser = loadCachedUser()
      if (cachedUser) {
        setUser(cachedUser)
        setIsLoading(false)
        setIsInitialized(true)
        return
      }

      // If no cache, check session
      const { data: { session } } = await supabase.auth.getSession()

      if (session?.user) {
        const userProfile = await getUserProfile(session.user)
        setUserWithPersist(userProfile)
      } else {
        setUserWithPersist(null)
      }

      setIsLoading(false)
      setIsInitialized(true)
    }

    initAuth()

    // Only listen for actual auth changes, not initial load
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      // Skip initial session event
      if (!isInitialized) return

      if (event === 'SIGNED_IN' && session?.user) {
        const userProfile = await getUserProfile(session.user)
        setUserWithPersist(userProfile)
      } else if (event === 'SIGNED_OUT') {
        setUserWithPersist(null)
      }
    })

    return () => subscription.unsubscribe()
  }, [isInitialized])

  const login = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({ email, password })
    if (error) throw error
  }

  const register = async (email: string, password: string, name: string) => {
    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: { data: { full_name: name } }
    })
    if (error) throw error
  }

  const logout = async () => {
    await supabase.auth.signOut()
    setUserWithPersist(null)
    window.location.href = '/'
  }

  return (
    <AuthContext.Provider value={{ user, isLoading, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider')
  }
  return context
}
